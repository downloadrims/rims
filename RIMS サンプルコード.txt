package download_RIMS;

import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FilenameFilter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripperByArea;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

public class RIMS {
	// 移動･リネーム対象のファイルがあるフォルダのパス
	static String base_path = "C:\\RIMS\\"; // ここにダウンロードしたRIMS PDF群
	// 解析対象のWebページ
	static String base_url = "http://www.kurims.kyoto-u.ac.jp/~kyodo/kokyuroku/contents/";
	// static String charset = "Shift_JIS"; // ↑このページの文字コード
	static Matcher m;

	public static void main(String[] args) {
		for (int i = 1801; i <= 2148; i++) { // i≡第i回目の研究集会について(0001-2148)
			RIMS rims = new RIMS();
			rims.parseHTML(i);
		}
	}

	public void parseHTML(int i) {
		// 発表者のpdf情報(開始ページ番号,タイトル,発表者名)のリスト
		ArrayList<PDF_info> pdf_info = new ArrayList<PDF_info>();
		String folder_name; // 移動先フォルダの名称
		try {
			String[] title = new String[2]; // 研究集会のタイトル(日本語,英語)
			Document doc = Jsoup.connect(base_url + i + ".html").get(); // ダウンロードページを取得
			// (1):第i回研究集会の日本語と英語タイトルを取得
			int skip = 2;
			if (doc.select("body>div:nth-child(1)").text().contains("このページに掲載している原稿は")) {
				skip = 4;
			}
			// タイトル要素は、Body要素直下の2or4個目のDiv要素 の次のa要素の直下にある。
			Elements elem = doc.select("body>div:nth-child(" + skip + ")+a>div:nth-child(1)");
			title = new String[]{elem.text(), elem.next().text()};

			// (2):開催年月日を取得
			elem = elem.parents().next(); // 開催年月日の要素(div)は、上記a要素の直後

			// (3):移動先フォルダの名称を決める。
			// フォルダ名の書式:[【第i回のi】：集会のタイトル] _【開催年月日】
			folder_name = "[" + String.format("%04d", i) + "："
					+ (!title[0].equals("") ? title[0] : title[1]) + "] _" + elem.text();
			folder_name = StringUtils.replaceEach( // 第2041回でタイトルに｢?｣が混入してた
					folder_name, new String[]{"/", "〜", "?"}, new String[]{"-", "~", "？"});

			// (4):主催者名を取得
			elem = elem.next(); // 主催者名の要素(div)は、開催年月日の直後
			pdf_info.add(new PDF_info(0, 0, "目次", elem.text().replaceAll("　", "")));

			// (5):各発表者の情報を取得。これは、div要素3個おきに記載されている。
			for (Elements e = elem.next().next().next(); e.hasText(); e = e.next().next().next()) {
				PDF_info tmp = new PDF_info();
				// (a):何人目の発表者か
				m = Pattern.compile("^(\\d{1,2})\\.").matcher(e.textNodes().get(0).text());
				m.find();
				tmp.num = Integer.parseInt(m.group(1));

				// (b):目次ページの｢------【数字】｣という表記から、発表者の開始ページ番号を取得
				m = Pattern.compile("-+ ?(\\d{1,3})").matcher(
						e.textNodes().get(e.textNodes().size() - 1).text());
				if (m.find()) {
					tmp.page = Integer.parseInt(m.group(1));
				} else {
					m = Pattern.compile("-+ ?\\((\\d{1,3})\\)").matcher(
							e.textNodes().get(e.textNodes().size() - 1).text());
					if (m.find()) { // 一部の回ではページ番号が｢--------(【数字】)｣となっている。
						tmp.page = 500 + Integer.parseInt(m.group(1)); // その場しのぎの番号
					} else { // ページ番号が丸ごと不記載の場合(例 第2098回)
						tmp.page = -1;
					}
				}

				// (c):発表者の発表タイトルを取得し、整形
				tmp.title = e.select("a").text().replaceAll(" \\([^\\)]+\\)$", "");
				tmp.title = StringUtils.replaceEach(tmp.title,
						new String[]{" : ", ": ", ":", "/", "\\", "?", "\"", "|", "<", ">", "*"},
						new String[]{"：", "：", "：", "／", "＼", "？", "'", "｜", "＜", "＞", "＊"});
				// (d):発表者の名前(複数の可能性あり)を取得
				tmp.auther = getAuthorNames(e.next().text());

				pdf_info.add(tmp);
			} // Webページの解析は終了
		} catch (Exception e) {
			System.out.print("第" + i + "回目研究集会HTML解析エラー:");
			e.printStackTrace();
			return;
		}

		/* 以下、第i回研究集会のファイルらを命名し、第i回研究集会用のフォルダに移動させる。
		 * ところが、ページによってはHTMLページ側に、PDF(リンク)不存在とページ番号不記載
		 * という問題があるため、それを加味したコード記述にせざるを得ない。
		 * 注意：2127回は13個目のファイル無し */
		try {
			Files.createDirectory(Paths.get(base_path + folder_name)); // 移動先フォルダ作成
			File[] pdf_list = new File(base_path).listFiles(new MyFilenameFilter(i)); // 移動元フォルダ取得
			for (int j = 0, k = 0; j < pdf_info.size() && k < pdf_list.length; j++) {
				// PDFファイルが存在しないのに、HTML上にはタイトルがあった場合
				if (pdf_info.get(j).num < getNumFromFileName(pdf_list[k].getName())) {
					// 例えば、i=1906,1937,1941,1946,1993…などで起こる。
					// しかし、i=2127では13個目ではタイトルすら存在しないことに注意。
					continue;
				}
				String new_name = getPDFPages(pdf_list[k]); // この関数は、ページ番号不記載に対応
				if (k == 0 && getPDFPages(pdf_list[1]).indexOf("-") == 4) {
					// k=0の時は、getPDFPagesは必ず(1820-00)という形式を返すので、
					// (000-000)を返すべきかどうかを判定した。
					new_name = "(000-000)"; // ページ番号不記載に応じた用のコードがこれ。
				}
				new_name += "[" + pdf_info.get(j).title + "](" + pdf_info.get(j).auther + ").pdf";
				// ｢copy｣を｢move｣に変更すれば移動に出来る。
				Files.copy(pdf_list[k].toPath(),
						Paths.get(base_path + folder_name + "\\" + new_name));
				k++;
			}
		} catch (Exception e) {
			System.out.println("第" + i + "回目研究集会HTML解析エラー:");
			e.printStackTrace();
			return;
		}
	}

	// 1801-03.pdf から 03 の数値｢3｣を取得
	public int getNumFromFileName(String name) {
		Matcher m = Pattern.compile("^\\d{1,4}-(\\d{2})\\.pdf$").matcher(name);
		m.find();
		return Integer.parseInt(m.group(1));
	}

	/* 著者名(複数の可能性あり)を含む文字列から、整形した著者名を返す。
	 * 入力例：
	 * Universite de Montreal / Princeton University / New York University / New
	 * York University Arguin,Louis-Pierre / Damron,Michael / Newman,Charles M. /
	 * Stein,Daniel L.
	 * この場合、｢Arguin,Louis-Pierre / Damron,Michael / Newman,Charles M. /
	 * Stein,Daniel L.｣
	 * が必要な著者名の文字列。これを
	 * ｢Louis-Pierre Arguin,Michael Damron,Charles M.Newman,Daniel L.Stein｣
	 * として出力する。著者名が日本語ならこんなにも厄介にはならない。 */
	public String getAuthorNames(String str) {
		// 一旦、大学名と文末の平仮名を除去する。
		Matcher m = Pattern.compile("^　{4}(?:[^　]+)?　{3,4}([^　]*|(?:[^　]+　[^　]+)*)(?:　{1,2}\\(.*\\))?$")
				.matcher(str);
		if (!m.find()) {
			System.out.println(str);
		}
		String[] names = m.group(1).split(" *+/ *+");
		for (int i = 0; i < names.length; i++) {
			if (names[i].matches("^[a-zA-Z-. ]+,[a-zA-Z-. ]+$")) { // 名前が英語の人の場合
				String[] tmp = names[i].split(",");
				names[i] = tmp[1] +
						(tmp[1].endsWith(".") ? "" : " ") + tmp[0]; // カンマを境に名字と名前を入れ替える
			} else {
				names[i] = names[i].replace(" ", ""); // 漢字の場合、名前と名字の間の空白を除去
				names[i] = names[i].replace("　", ""); // 名字と名前の間に全角空白を用いてた回があった(2129)
				names[i] = names[i].replace("\\", "＼"); // 名前に\記号を用いてた回があった
			}
		}
		return String.join(",", names);
	}

	/* 講究録Fileから、その1ページ目の左上に記載されてる開始･終了ページ番号を文字列で返す
	 * 記載されてなければ、｢(1801-03)｣という形式の文字列を返す */
	public String getPDFPages(File file) {
		String page = "";
		try(PDDocument document = PDDocument.load(file);) {
			// 左上の座標を基準として読み込む範囲を矩形で定義する
			double x = 42.0;
			double y = 43.0; // y=33,h=20なら｢数理解析研究所高級録｣まで入る
			double w = 115.0;
			double h = 10.0;
			Rectangle2D area = new Rectangle2D.Double(x, y, w, h);

			PDFTextStripperByArea stripper = new PDFTextStripperByArea();
			stripper.addRegion("list", area); // 抽出対象の範囲を指定する(名前は任意)
			// 抽出対象のページから範囲ごとにテキストを抽出する(getPageに渡すpageIndexは0~)
			stripper.extractRegions(document.getPage(0));

			String text = stripper.getTextForRegion("list"); // 抽出結果を取得する
			Matcher m = Pattern.compile("^第 \\d{1,4}巻 \\d{4}年 (\\d{1,3})-(\\d{1,3})\r\n$")
					.matcher(text);
			if (m.find()) {
				page = String.format("(%03d-%03d)",
						Integer.parseInt(m.group(1)), Integer.parseInt(m.group(2)));
			} else {
				page = "(" + StringUtils.replaceEach(file.getName(),
						new String[]{":", ".pdf"}, new String[]{"-", ""}) + ")";
			}
		} catch (Exception e) {
			System.out.println(file + "のページ番号解析が出来ませんでした。");
			e.printStackTrace();
		}
		return page;
	}
}

class PDF_info {
	int num, page;
	String title, auther;

	PDF_info() {
	}

	PDF_info(int n, int p, String t, String a) {
		num = n;
		page = p;
		title = t;
		auther = a;
	}
}

class MyFilenameFilter implements FilenameFilter {
	int num;

	MyFilenameFilter(int n) {
		num = n;
	}

	@Override
	public boolean accept(File file, String str) {
		// RIMSからダウンロードしたPDFはファイル名冒頭4桁が第i回研究集会のiとなっている。
		return str.startsWith(String.format("%04d", num));
	}
}
